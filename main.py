import os
from aiogram import Bot, Dispatcher, executor, types
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–æ–∫–µ–Ω –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()
BOT_TOKEN = os.getenv("BOT_TOKEN")

if not BOT_TOKEN:
    raise Exception("BOT_TOKEN –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!")

bot = Bot(token=BOT_TOKEN)
dp = Dispatcher(bot)

# –°—Ç–∞—Ä—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
@dp.message_handler(commands=['start', 'help'])
async def send_welcome(message: types.Message):
    await message.reply("üëã –ü—Ä–∏–≤–µ—Ç! –≠—Ç–æ Telegram-–±–æ—Ç Herchik Smart AI.\n\n–ù–∞–ø–∏—à–∏ /menu —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å.")

# –ü—Ä–∏–º–µ—Ä –∫–æ–º–∞–Ω–¥—ã –º–µ–Ω—é
@dp.message_handler(commands=['menu'])
async def menu(message: types.Message):
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    keyboard.add("üß† –û –±–æ—Ç–µ", "üì¶ –¢–∞—Ä–∏—Ñ—ã", "üìû –ü–æ–¥–¥–µ—Ä–∂–∫–∞")
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª:", reply_markup=keyboard)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫
@dp.message_handler(lambda message: message.text == "üß† –û –±–æ—Ç–µ")
async def about_bot(message: types.Message):
    await message.answer("üí° –≠—Ç–æ—Ç –±–æ—Ç –ø–æ–º–æ–≥–∞–µ—Ç –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—É Smart Money Zones X –Ω–∞ TradingView.")

@dp.message_handler(lambda message: message.text == "üì¶ –¢–∞—Ä–∏—Ñ—ã")
async def pricing(message: types.Message):
    await message.answer("üí∞ –î–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–∞—Ä–∏—Ñ—ã:\n\n"
                         "üîπ 1 –º–µ—Å—è—Ü ‚Äî 99,000 —Å—É–º\n"
                         "üîπ 3 –º–µ—Å—è—Ü–∞ ‚Äî 199,000 —Å—É–º\n"
                         "üîπ Lifetime ‚Äî 499,000 —Å—É–º\n\n"
                         "–û–ø–ª–∞—Ç–∞: Payme, Click, UzCard, USDT")

@dp.message_handler(lambda message: message.text == "üìû –ü–æ–¥–¥–µ—Ä–∂–∫–∞")
async def support(message: types.Message):
    await message.answer("üì© –ü–æ–¥–¥–µ—Ä–∂–∫–∞: @forex0042")

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
if __name__ == '__main__':
    from aiogram import executor
    executor.start_polling(dp, skip_updates=True)
